/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applic_data_analysis;

import AccessBD.BeanBDAccess;
import AccessBD.BeanBDMySql;
import Queries.QuerySelect;
import RequeteReponsePIDEP.ReponsePIDEP;
import RequeteReponsePIDEP.RequetePIDEP;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Julien
 */
public class MainForm extends javax.swing.JFrame 
{
    private Socket CSocket;
    private Properties PropertiesDataAnalysis;
    private int Port;
    private String AdresseServeur;
    
    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        initComponents();
        LoadPropertiesFile();
        ConnexionServeur();
    }
    
    private void LoadPropertiesFile()
    {
        File f = new File("Data_Analysis.properties");
        if(!f.exists())
        {
            OutputStream os = null;
            
            try 
            {
                os = new FileOutputStream(f);
            } 
            catch (FileNotFoundException ex) 
            {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Properties propToCreate = new Properties();
            propToCreate.put("ADRESSE_IP_SERVEUR", "192.168.1.102");
            propToCreate.put("PORT_STAT", "31018");
            propToCreate.put("MAX_CLI", "3");
            propToCreate.put("SEP", "#");
            propToCreate.put("ADRESSE_IP_BD", "127.0.0.1");
            propToCreate.put("PORT_BD", "3306");
            propToCreate.put("SCHEMA_COMPTA", "bd_compta");
            propToCreate.put("SCHEMA_TRAFIC", "bd_trafic");
            propToCreate.put("SCHEMA_DECISIONS", "bd_decisions");
            
            try
            {
                propToCreate.store(os, "Data_Analysis");
                os.flush();
            } 
            catch (IOException ex)
            {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try
        {
            InputStream is = new FileInputStream(f);
            PropertiesDataAnalysis = new Properties();
            PropertiesDataAnalysis.load(is);
            Port = Integer.valueOf(PropertiesDataAnalysis.getProperty("PORT_STAT"));
            AdresseServeur = PropertiesDataAnalysis.getProperty("ADRESSE_IP_SERVEUR");
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void ConnexionServeur()
    {
        try
        {
            CSocket = new Socket(AdresseServeur, Port);
            RequetePIDEP req = new RequetePIDEP(RequetePIDEP.REQUEST_CON, null);
            try
            {
                ObjectOutputStream oos = null;
                oos = new ObjectOutputStream(CSocket.getOutputStream());
                oos.writeObject(req);
                oos.flush();
                btnLogin.setEnabled(true);
                btnDeconnexion.setEnabled(true);
            }
            catch (IOException ex) 
            {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (IOException ex) 
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGetStatInferTestHomogAnova = new javax.swing.JButton();
        btnDeconnexion = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        btnGetStatDescrCont = new javax.swing.JButton();
        btnGetGrContainerRep = new javax.swing.JButton();
        btnGetGrContainerComp = new javax.swing.JButton();
        btnGetStatInferTestConf = new javax.swing.JButton();
        btnGetStatInferTestHomog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGetStatInferTestHomogAnova.setText("Test d'hypothèse ANOVA du temps de stationnement d'un container");
        btnGetStatInferTestHomogAnova.setEnabled(false);
        btnGetStatInferTestHomogAnova.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStatInferTestHomogAnovaActionPerformed(evt);
            }
        });

        btnDeconnexion.setText("Déconnexion du serveur");
        btnDeconnexion.setEnabled(false);
        btnDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeconnexionActionPerformed(evt);
            }
        });

        btnLogin.setText("Login");
        btnLogin.setEnabled(false);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnGetStatDescrCont.setText("Statistiques descriptives des containers");
        btnGetStatDescrCont.setEnabled(false);
        btnGetStatDescrCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStatDescrContActionPerformed(evt);
            }
        });

        btnGetGrContainerRep.setText("Diagramme sectoriel de la répartition des containers");
        btnGetGrContainerRep.setEnabled(false);
        btnGetGrContainerRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetGrContainerRepActionPerformed(evt);
            }
        });

        btnGetGrContainerComp.setText("Histogramme comparé de la répartition des containers");
        btnGetGrContainerComp.setEnabled(false);
        btnGetGrContainerComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetGrContainerCompActionPerformed(evt);
            }
        });

        btnGetStatInferTestConf.setText("Test d'hypothèse de conformité du temps de stationnement d'un container");
        btnGetStatInferTestConf.setEnabled(false);
        btnGetStatInferTestConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStatInferTestConfActionPerformed(evt);
            }
        });

        btnGetStatInferTestHomog.setText("Test d'hypothèse d'homogénéité du temps de stationnement d'un container");
        btnGetStatInferTestHomog.setEnabled(false);
        btnGetStatInferTestHomog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStatInferTestHomogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetStatDescrCont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetGrContainerRep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetGrContainerComp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetStatInferTestConf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetStatInferTestHomog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGetStatInferTestHomogAnova, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeconnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetStatDescrCont)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetGrContainerRep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetGrContainerComp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetStatInferTestConf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetStatInferTestHomog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetStatInferTestHomogAnova)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeconnexion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        ConnectionForm CF = new ConnectionForm(this, true);
        CF.setVisible(true);
        String strLogin = CF.getLogin();
        String strPassword = CF.getPassword();
        
        System.out.println("Message à envoyer au serveur :");
        System.out.println("Login : " + strLogin);
        System.out.println("Password : " + strPassword);

        /* Génération du sel de guérande */
        long lDate = (new Date()).getTime();
        Double dRandom = Math.random();
        
        System.out.println("Le sel est composé de l'heure au format long (" + lDate + ") et d'un nombre aléatoire (" + dRandom + ")");

        try 
        {
            /* Envoi de la requête au serveur */
            ObjectOutputStream oos = new ObjectOutputStream(CSocket.getOutputStream());
            RequetePIDEP req = new RequetePIDEP(RequetePIDEP.REQUEST_LOGIN, null);
            oos.writeObject(req);
            oos.flush();
            
            /* Envoi du sel sur un flux tableau de bytes */
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream bdos = new DataOutputStream(baos);
            bdos.writeLong(lDate);
            bdos.writeDouble(dRandom);

            /* Confection du digest à envoyer au serveur */
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update(strPassword.getBytes());
            md.update(baos.toByteArray());

            byte[] Digest = md.digest();

            System.out.println("Le digest vaut : " + Digest);
            
            /* Envoi du message au serveur */
            DataOutputStream dos = new DataOutputStream(CSocket.getOutputStream());
            dos.writeUTF(strLogin); // Envoi du login
            dos.writeLong(lDate); // Envoi de la date au format long
            dos.writeDouble(dRandom); // Envoi du random
            dos.writeInt(Digest.length); // Envoi de la taille du digest
            dos.write(Digest); // Envoi du digest
            dos.flush();
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NoSuchAlgorithmException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Attente de réponse */
        ObjectInputStream ois = null;
        ReponsePIDEP rep = null;
        try
        {
            ois = new ObjectInputStream(CSocket.getInputStream());
            rep = (ReponsePIDEP)ois.readObject();
            
            if(rep.getCode() == ReponsePIDEP.LOGIN_OK)
            {
                btnGetStatDescrCont.setEnabled(true);
                btnGetGrContainerRep.setEnabled(true);
                btnGetGrContainerComp.setEnabled(true);
                btnGetStatInferTestConf.setEnabled(true);
                btnGetStatInferTestHomog.setEnabled(true);
                btnGetStatInferTestHomogAnova.setEnabled(true);
            }
            else
                JOptionPane.showMessageDialog(this, "KO");
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnGetStatDescrContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStatDescrContActionPerformed
        BeanBDAccess BeanTrafic = new BeanBDMySql(PropertiesDataAnalysis.getProperty("ADRESSE_IP_BD"), PropertiesDataAnalysis.getProperty("PORT_BD"), PropertiesDataAnalysis.getProperty("SCHEMA_TRAFIC"), "root", "");
        DefaultComboBoxModel dcbmAnnee = new DefaultComboBoxModel();
        QuerySelect qs = new QuerySelect();
        qs.AddFrom("Mouvement");
        qs.AddSelect("DISTINCT SUBSTR(DateArrivee, 7)");
        
        try
        {
            ResultSet rs = BeanTrafic.Select(qs);
            while(rs.next())
                dcbmAnnee.addElement(rs.getString(1));
            
            rs.close();
        } 
        catch (SQLException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        GetStatDescrContForm GSDCF = new GetStatDescrContForm(this, true, CSocket);
        GSDCF.setComboBoxModelAnnee(dcbmAnnee);
        GSDCF.setVisible(true);
    }//GEN-LAST:event_btnGetStatDescrContActionPerformed

    private void btnGetGrContainerRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetGrContainerRepActionPerformed
        BeanBDAccess BeanTrafic = new BeanBDMySql(PropertiesDataAnalysis.getProperty("ADRESSE_IP_BD"), PropertiesDataAnalysis.getProperty("PORT_BD"), PropertiesDataAnalysis.getProperty("SCHEMA_TRAFIC"), "root", "");
        DefaultComboBoxModel dcbmMois = new DefaultComboBoxModel();
        DefaultComboBoxModel dcbmAnnee = new DefaultComboBoxModel();
        QuerySelect qsMois = new QuerySelect();
        qsMois.AddFrom("Mouvement ORDER BY 1");
        qsMois.AddSelect("DISTINCT SUBSTR(DateArrivee, 4, 2)");
        QuerySelect qsAnnee = new QuerySelect();
        qsAnnee.AddFrom("Mouvement ORDER BY 1");
        qsAnnee.AddSelect("DISTINCT SUBSTR(DateArrivee, 7)");
        try
        {
            ResultSet rsMois = BeanTrafic.Select(qsMois);
            while(rsMois.next())
                dcbmMois.addElement(rsMois.getString(1));
            
            rsMois.close();
            
            ResultSet rsAnnee = BeanTrafic.Select(qsAnnee);
            while(rsAnnee.next())
                dcbmAnnee.addElement(rsAnnee.getString(1));
            
            rsAnnee.close();
        } 
        catch (SQLException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        DiagrammeSectorielForm DSF = new DiagrammeSectorielForm(this, true, CSocket);
        DSF.setComboBoxModelMois(dcbmMois);
        DSF.setComboBoxModelAnnee(dcbmAnnee);
        DSF.setVisible(true);
    }//GEN-LAST:event_btnGetGrContainerRepActionPerformed

    private void btnGetGrContainerCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetGrContainerCompActionPerformed
        BeanBDAccess BeanTrafic = new BeanBDMySql(PropertiesDataAnalysis.getProperty("ADRESSE_IP_BD"), PropertiesDataAnalysis.getProperty("PORT_BD"), PropertiesDataAnalysis.getProperty("SCHEMA_TRAFIC"), "root", "");
        DefaultComboBoxModel dcbmAnnee = new DefaultComboBoxModel();
        QuerySelect qs = new QuerySelect();
        qs.AddFrom("Mouvement");
        qs.AddSelect("DISTINCT SUBSTR(DateArrivee, 7)");
        
        try
        {
            ResultSet rs = BeanTrafic.Select(qs);
            while(rs.next())
                dcbmAnnee.addElement(rs.getString(1));
            
            rs.close();
        } 
        catch (SQLException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        HistogrammeCompareForm HCF = new HistogrammeCompareForm(this, true, CSocket);
        HCF.setComboBoxModelAnnee(dcbmAnnee);
        HCF.setVisible(true);
    }//GEN-LAST:event_btnGetGrContainerCompActionPerformed

    private void btnGetStatInferTestConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStatInferTestConfActionPerformed
        ConformityTestForm CTF = new ConformityTestForm(this, true, CSocket);
        CTF.setVisible(true);
    }//GEN-LAST:event_btnGetStatInferTestConfActionPerformed

    private void btnGetStatInferTestHomogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStatInferTestHomogActionPerformed
        try
        {
            String strRequest = "Ville#Destination#NULL";
            RequetePIDEP req = new RequetePIDEP(RequetePIDEP.REQUEST_DATABASE, strRequest);
            ObjectOutputStream oos = new ObjectOutputStream(CSocket.getOutputStream());
            oos.writeObject(req);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(CSocket.getInputStream());
            ReponsePIDEP repDestination = (ReponsePIDEP)ois.readObject();
            HashMap hmDestination = (HashMap)repDestination.getResult();
            DefaultComboBoxModel dcbmDestination = (DefaultComboBoxModel)hmDestination.get("DCBM1");
            DefaultComboBoxModel dcbmDestination2 = (DefaultComboBoxModel)hmDestination.get("DCBM2");
            HomogeneityForm HF = new HomogeneityForm(this, true, CSocket);
            HF.setComboBoxDestination1(dcbmDestination);
            HF.setComboBoxDestination2(dcbmDestination2);
            HF.setVisible(true);
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGetStatInferTestHomogActionPerformed

    private void btnGetStatInferTestHomogAnovaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStatInferTestHomogAnovaActionPerformed
        AnovaForm AF = new AnovaForm(this, true, CSocket);
        AF.setVisible(true);
    }//GEN-LAST:event_btnGetStatInferTestHomogAnovaActionPerformed

    private void btnDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeconnexionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeconnexionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeconnexion;
    private javax.swing.JButton btnGetGrContainerComp;
    private javax.swing.JButton btnGetGrContainerRep;
    private javax.swing.JButton btnGetStatDescrCont;
    private javax.swing.JButton btnGetStatInferTestConf;
    private javax.swing.JButton btnGetStatInferTestHomog;
    private javax.swing.JButton btnGetStatInferTestHomogAnova;
    private javax.swing.JButton btnLogin;
    // End of variables declaration//GEN-END:variables
}
