/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serveur_bateaux;

import AccessBD.BeanBDAccess;
import AccessBD.BeanBDCsv;
import AccessBD.BeanBDMySql;
import RequeteReponseIOBREP.RequeteIOBREP;
import Utils.ConsoleServeur;
import Utils.ListeTaches;
import Utils.ThreadServeur;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Julien
 */
public class MainForm extends javax.swing.JFrame implements ConsoleServeur
{
    private ThreadServeur _ThreadServeur = null;
    private Properties PropertiesFileServeurBateaux;
    private int NombreMaxClients;
    private String RequestSeparator;
    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        initComponents();
        LoadPropertiesFile();
    }
    
    /**
     * Création/chargement du fichier properties ServeurBateaux.properties
     */
    private void LoadPropertiesFile()
    {
        File f = new File("ServeurBateaux.properties");
        if(!f.exists())
        {
            OutputStream os = null;
            
            try 
            {
                os = new FileOutputStream(f);
            } 
            catch (FileNotFoundException ex) 
            {
                Logger.getLogger(Serveur_Bateaux.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Properties propToCreate = new Properties();
            propToCreate.put("PORT_BATEAUX", "31019");
            propToCreate.put("MAX_CLI", "3");
            propToCreate.put("SEP", "#");
            propToCreate.put("ADRESSE_IP_BD", "127.0.0.1");
            propToCreate.put("PORT_BD", "3306");
            propToCreate.put("SCHEMA_BD", "bd_compta");
            
            try
            {
                propToCreate.store(os, "Serveur_Bateaux");
                os.flush();
            } 
            catch (IOException ex)
            {
                Logger.getLogger(Serveur_Bateaux.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try
        {
            InputStream is = new FileInputStream(f);
            PropertiesFileServeurBateaux = new Properties();
            PropertiesFileServeurBateaux.load(is);
            tfdPort.setText(PropertiesFileServeurBateaux.getProperty("PORT_BATEAUX"));
            NombreMaxClients = Integer.valueOf(PropertiesFileServeurBateaux.getProperty("MAX_CLI"));
            RequestSeparator = PropertiesFileServeurBateaux.getProperty("SEP");
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(Serveur_Bateaux.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void TraceEvenements(String commentaire)
    {
        Vector ligne = new Vector();
        StringTokenizer parser = new StringTokenizer(commentaire, RequestSeparator);
        while (parser.hasMoreTokens())
            ligne.add(parser.nextToken());
        DefaultTableModel dtm = (DefaultTableModel)this.tblRequete.getModel();
        dtm.insertRow(dtm.getRowCount(), ligne);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPort = new javax.swing.JLabel();
        tfdPort = new javax.swing.JTextField();
        btnDemarrerServeur = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequete = new javax.swing.JTable();
        btnStopperServeur = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPort.setText("Port :");

        btnDemarrerServeur.setText("Démarrer le serveur");
        btnDemarrerServeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDemarrerServeurActionPerformed(evt);
            }
        });

        tblRequete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origine", "Requête", "Thread"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequete);

        btnStopperServeur.setText("Stopper le serveur");
        btnStopperServeur.setEnabled(false);
        btnStopperServeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopperServeurActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfdPort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDemarrerServeur, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnStopperServeur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(tfdPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDemarrerServeur)
                    .addComponent(btnStopperServeur))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDemarrerServeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDemarrerServeurActionPerformed
        try
        {
            int Port = Integer.parseInt(this.tfdPort.getText());
            btnDemarrerServeur.setEnabled(false);
            btnStopperServeur.setEnabled(true);
            BeanBDAccess BeanCompta = new BeanBDMySql(PropertiesFileServeurBateaux.getProperty("ADRESSE_IP_BD"), PropertiesFileServeurBateaux.getProperty("PORT_BD"), PropertiesFileServeurBateaux.getProperty("SCHEMA_BD"), "root", "");
            BeanBDAccess BeanContainers = new BeanBDCsv();
            HashMap hm = new HashMap();
            hm.put(RequeteIOBREP.BeanCompta, BeanCompta);
            hm.put(RequeteIOBREP.BeanContainers, BeanContainers);

            this.setThreadServeur(new ThreadServeur(Port, new ListeTaches(), this, NombreMaxClients, hm));
            this.getThreadServeur().start();
            this.TraceEvenements("Main#Lancement serveur#Main");
        }
        catch(NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this, "Le port entré est invalide.", "Erreur de saisie du port", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDemarrerServeurActionPerformed

    private void btnStopperServeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopperServeurActionPerformed
        if(this.getThreadServeur() != null)
        {
            this.getThreadServeur().interrupt();
            this.TraceEvenements("Main#Arrêt du serveur#Main");
            btnDemarrerServeur.setEnabled(true);
            btnStopperServeur.setEnabled(false);
        }
    }//GEN-LAST:event_btnStopperServeurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDemarrerServeur;
    private javax.swing.JButton btnStopperServeur;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPort;
    private javax.swing.JTable tblRequete;
    private javax.swing.JTextField tfdPort;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the _ThreadServeur
     */
    public ThreadServeur getThreadServeur() {
        return _ThreadServeur;
    }

    /**
     * @param _ThreadServeur the _ThreadServeur to set
     */
    public void setThreadServeur(ThreadServeur _ThreadServeur) {
        this._ThreadServeur = _ThreadServeur;
    }
}
